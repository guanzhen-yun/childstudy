package com.tantan.mydata.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDYCOLOR".
*/
public class StudyColorDao extends AbstractDao<StudyColor, Long> {

    public static final String TABLENAME = "STUDYCOLOR";

    /**
     * Properties of entity StudyColor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ColorStr = new Property(1, String.class, "colorStr", false, "colorStr");
        public final static Property IsBgWhite = new Property(2, boolean.class, "isBgWhite", false, "isBgWhite");
        public final static Property ColorText = new Property(3, String.class, "colorText", false, "colorText");
    }


    public StudyColorDao(DaoConfig config) {
        super(config);
    }
    
    public StudyColorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDYCOLOR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"colorStr\" TEXT," + // 1: colorStr
                "\"isBgWhite\" INTEGER NOT NULL ," + // 2: isBgWhite
                "\"colorText\" TEXT);"); // 3: colorText
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDYCOLOR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StudyColor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String colorStr = entity.getColorStr();
        if (colorStr != null) {
            stmt.bindString(2, colorStr);
        }
        stmt.bindLong(3, entity.getIsBgWhite() ? 1L: 0L);
 
        String colorText = entity.getColorText();
        if (colorText != null) {
            stmt.bindString(4, colorText);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StudyColor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String colorStr = entity.getColorStr();
        if (colorStr != null) {
            stmt.bindString(2, colorStr);
        }
        stmt.bindLong(3, entity.getIsBgWhite() ? 1L: 0L);
 
        String colorText = entity.getColorText();
        if (colorText != null) {
            stmt.bindString(4, colorText);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StudyColor readEntity(Cursor cursor, int offset) {
        StudyColor entity = new StudyColor( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // colorStr
            cursor.getShort(offset + 2) != 0, // isBgWhite
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // colorText
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StudyColor entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setColorStr(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsBgWhite(cursor.getShort(offset + 2) != 0);
        entity.setColorText(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StudyColor entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StudyColor entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StudyColor entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
