package com.tantan.mydata.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USERINFO".
*/
public class UserInfoEntityDao extends AbstractDao<UserInfoEntity, Long> {

    public static final String TABLENAME = "USERINFO";

    /**
     * Properties of entity UserInfoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HeadPath = new Property(1, String.class, "headPath", false, "headPath");
        public final static Property Nick = new Property(2, String.class, "nick", false, "nick");
        public final static Property Sex = new Property(3, String.class, "sex", false, "sex");
        public final static Property Age = new Property(4, int.class, "age", false, "age");
        public final static Property AccountNum = new Property(5, String.class, "accountNum", false, "accountNum");
        public final static Property IsParent = new Property(6, boolean.class, "isParent", false, "isParent");
        public final static Property Password = new Property(7, String.class, "password", false, "password");
    }


    public UserInfoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USERINFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"headPath\" TEXT," + // 1: headPath
                "\"nick\" TEXT," + // 2: nick
                "\"sex\" TEXT," + // 3: sex
                "\"age\" INTEGER NOT NULL ," + // 4: age
                "\"accountNum\" TEXT," + // 5: accountNum
                "\"isParent\" INTEGER NOT NULL ," + // 6: isParent
                "\"password\" TEXT);"); // 7: password
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USERINFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String headPath = entity.getHeadPath();
        if (headPath != null) {
            stmt.bindString(2, headPath);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(3, nick);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
        stmt.bindLong(5, entity.getAge());
 
        String accountNum = entity.getAccountNum();
        if (accountNum != null) {
            stmt.bindString(6, accountNum);
        }
        stmt.bindLong(7, entity.getIsParent() ? 1L: 0L);
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(8, password);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String headPath = entity.getHeadPath();
        if (headPath != null) {
            stmt.bindString(2, headPath);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(3, nick);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
        stmt.bindLong(5, entity.getAge());
 
        String accountNum = entity.getAccountNum();
        if (accountNum != null) {
            stmt.bindString(6, accountNum);
        }
        stmt.bindLong(7, entity.getIsParent() ? 1L: 0L);
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(8, password);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfoEntity readEntity(Cursor cursor, int offset) {
        UserInfoEntity entity = new UserInfoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // headPath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nick
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sex
            cursor.getInt(offset + 4), // age
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // accountNum
            cursor.getShort(offset + 6) != 0, // isParent
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // password
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfoEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHeadPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNick(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAge(cursor.getInt(offset + 4));
        entity.setAccountNum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsParent(cursor.getShort(offset + 6) != 0);
        entity.setPassword(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfoEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfoEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfoEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
