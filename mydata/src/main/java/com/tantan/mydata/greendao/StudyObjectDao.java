package com.tantan.mydata.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDYOBJECT".
*/
public class StudyObjectDao extends AbstractDao<StudyObject, Long> {

    public static final String TABLENAME = "STUDYOBJECT";

    /**
     * Properties of entity StudyObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjUrl = new Property(1, String.class, "objUrl", false, "objUrl");
        public final static Property Type = new Property(2, int.class, "type", false, "type");
        public final static Property ObjName = new Property(3, String.class, "objName", false, "objName");
        public final static Property ObjWord = new Property(4, String.class, "objWord", false, "objWord");
    }


    public StudyObjectDao(DaoConfig config) {
        super(config);
    }
    
    public StudyObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDYOBJECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"objUrl\" TEXT," + // 1: objUrl
                "\"type\" INTEGER NOT NULL ," + // 2: type
                "\"objName\" TEXT," + // 3: objName
                "\"objWord\" TEXT);"); // 4: objWord
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDYOBJECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StudyObject entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objUrl = entity.getObjUrl();
        if (objUrl != null) {
            stmt.bindString(2, objUrl);
        }
        stmt.bindLong(3, entity.getType());
 
        String objName = entity.getObjName();
        if (objName != null) {
            stmt.bindString(4, objName);
        }
 
        String objWord = entity.getObjWord();
        if (objWord != null) {
            stmt.bindString(5, objWord);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StudyObject entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objUrl = entity.getObjUrl();
        if (objUrl != null) {
            stmt.bindString(2, objUrl);
        }
        stmt.bindLong(3, entity.getType());
 
        String objName = entity.getObjName();
        if (objName != null) {
            stmt.bindString(4, objName);
        }
 
        String objWord = entity.getObjWord();
        if (objWord != null) {
            stmt.bindString(5, objWord);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StudyObject readEntity(Cursor cursor, int offset) {
        StudyObject entity = new StudyObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // objUrl
            cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // objName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // objWord
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StudyObject entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setObjName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setObjWord(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StudyObject entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StudyObject entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StudyObject entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
